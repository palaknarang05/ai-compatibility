import {
  BarPlot
} from "./chunk-XJMTKGEB.js";
import {
  AreaPlot,
  LineHighlightPlot,
  LinePlot
} from "./chunk-26T5LZ7Q.js";
import {
  ChartsAxisHighlight,
  ChartsClipPath
} from "./chunk-TPI6RNA7.js";
import {
  ChartDataProvider,
  ChartsSurface,
  ChartsTooltip
} from "./chunk-RBZLRPC6.js";
import {
  DEFAULT_X_AXIS_KEY,
  DEFAULT_Y_AXIS_KEY
} from "./chunk-VO4QT7RG.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-BFL632LT.js";
import {
  useId
} from "./chunk-GOIHIF2J.js";
import {
  _extends
} from "./chunk-EQCCHGRT.js";
import {
  require_prop_types
} from "./chunk-KGQARGC2.js";
import {
  require_jsx_runtime
} from "./chunk-OBYCLIUT.js";
import {
  require_react
} from "./chunk-BQYK6RGN.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@mui/x-charts/esm/SparkLineChart/SparkLineChart.js
var React = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var _excluded = ["xAxis", "yAxis", "width", "height", "margin", "color", "sx", "showTooltip", "showHighlight", "axisHighlight", "children", "slots", "slotProps", "data", "plotType", "valueFormatter", "area", "curve", "className", "disableClipping", "clipAreaOffset"];
var SPARK_LINE_DEFAULT_MARGIN = 5;
var SparkLineChart = React.forwardRef(function SparkLineChart2(props, ref) {
  const {
    xAxis,
    yAxis,
    width,
    height,
    margin = SPARK_LINE_DEFAULT_MARGIN,
    color,
    sx,
    showTooltip,
    showHighlight,
    axisHighlight: inAxisHighlight,
    children,
    slots,
    slotProps,
    data,
    plotType = "line",
    valueFormatter = (value) => value === null ? "" : value.toString(),
    area,
    curve = "linear",
    className,
    disableClipping,
    clipAreaOffset
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  const clipPathOffset = {
    top: clipAreaOffset?.top ?? 1,
    right: clipAreaOffset?.right ?? 1,
    bottom: clipAreaOffset?.bottom ?? 1,
    left: clipAreaOffset?.left ?? 1
  };
  const defaultXHighlight = showHighlight && plotType === "bar" ? {
    x: "band"
  } : {
    x: "none"
  };
  const axisHighlight = _extends({}, defaultXHighlight, inAxisHighlight);
  const Tooltip = props.slots?.tooltip ?? ChartsTooltip;
  const colors = React.useMemo(() => {
    if (color == null) {
      return void 0;
    }
    return typeof color === "function" ? (mode) => [color(mode)] : [color];
  }, [color]);
  return (0, import_jsx_runtime.jsxs)(ChartDataProvider, {
    series: [_extends({
      type: plotType,
      data,
      valueFormatter
    }, plotType === "bar" ? {} : {
      area,
      curve,
      disableHighlight: !showHighlight
    })],
    width,
    height,
    margin,
    xAxis: [_extends({
      id: DEFAULT_X_AXIS_KEY,
      scaleType: plotType === "bar" ? "band" : "point",
      data: Array.from({
        length: data.length
      }, (_, index) => index),
      hideTooltip: xAxis === void 0
    }, xAxis, {
      position: "none"
    })],
    yAxis: [_extends({
      id: DEFAULT_Y_AXIS_KEY
    }, yAxis, {
      position: "none"
    })],
    colors,
    disableAxisListener: (!showTooltip || slotProps?.tooltip?.trigger !== "axis") && axisHighlight?.x === "none" && axisHighlight?.y === "none",
    children: [(0, import_jsx_runtime.jsxs)(ChartsSurface, _extends({
      className,
      ref,
      sx
    }, other, {
      children: [(0, import_jsx_runtime.jsxs)("g", {
        clipPath: `url(#${clipPathId})`,
        children: [plotType === "bar" && (0, import_jsx_runtime.jsx)(BarPlot, {
          skipAnimation: true,
          slots,
          slotProps
        }), plotType === "line" && (0, import_jsx_runtime.jsxs)(React.Fragment, {
          children: [(0, import_jsx_runtime.jsx)(AreaPlot, {
            skipAnimation: true,
            slots,
            slotProps
          }), (0, import_jsx_runtime.jsx)(LinePlot, {
            skipAnimation: true,
            slots,
            slotProps
          })]
        })]
      }), plotType === "line" && (0, import_jsx_runtime.jsx)(LineHighlightPlot, {
        slots,
        slotProps
      }), disableClipping ? null : (0, import_jsx_runtime.jsx)(ChartsClipPath, {
        id: clipPathId,
        offset: clipPathOffset
      }), (0, import_jsx_runtime.jsx)(ChartsAxisHighlight, _extends({}, axisHighlight)), children]
    })), showTooltip && (0, import_jsx_runtime.jsx)(Tooltip, _extends({}, props.slotProps?.tooltip))]
  });
});
if (true) SparkLineChart.displayName = "SparkLineChart";
true ? SparkLineChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types.default.shape({
    current: import_prop_types.default.object
  }),
  /**
   * Set to `true` to fill spark line area.
   * Has no effect if plotType='bar'.
   * @default false
   */
  area: import_prop_types.default.bool,
  axisHighlight: import_prop_types.default.shape({
    x: import_prop_types.default.oneOf(["band", "line", "none"]),
    y: import_prop_types.default.oneOf(["band", "line", "none"])
  }),
  children: import_prop_types.default.node,
  className: import_prop_types.default.string,
  /**
   * The clipped area offset in pixels.
   *
   * This prevents partial clipping of lines when they are drawn on the edge of the drawing area.
   *
   * @default { top: 1, right: 1, bottom: 1, left: 1 }
   */
  clipAreaOffset: import_prop_types.default.shape({
    bottom: import_prop_types.default.number,
    left: import_prop_types.default.number,
    right: import_prop_types.default.number,
    top: import_prop_types.default.number
  }),
  /**
   * Color used to colorize the sparkline.
   * @default rainbowSurgePalette[0]
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.string]),
  /**
   * @default 'linear'
   */
  curve: import_prop_types.default.oneOf(["bumpX", "bumpY", "catmullRom", "linear", "monotoneX", "monotoneY", "natural", "step", "stepAfter", "stepBefore"]),
  /**
   * Data to plot.
   */
  data: import_prop_types.default.arrayOf(import_prop_types.default.number).isRequired,
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types.default.arrayOf(import_prop_types.default.object),
  desc: import_prop_types.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types.default.bool,
  /**
   * When `true`, the chart's drawing area will not be clipped and elements within can visually overflow the chart.
   *
   * @default false
   */
  disableClipping: import_prop_types.default.bool,
  /**
   * If true, the voronoi interaction are ignored.
   */
  disableVoronoi: import_prop_types.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types.default.number,
  /**
   * The controlled axis highlight.
   * Identified by the axis id, and data index.
   */
  highlightedAxis: import_prop_types.default.arrayOf(import_prop_types.default.shape({
    axisId: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]).isRequired,
    dataIndex: import_prop_types.default.number.isRequired
  })),
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types.default.shape({
    dataIndex: import_prop_types.default.number,
    seriesId: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   * @default 5
   */
  margin: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
    bottom: import_prop_types.default.number,
    left: import_prop_types.default.number,
    right: import_prop_types.default.number,
    top: import_prop_types.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types.default.func,
  /**
   * The function called when the pointer position corresponds to a new axis data item.
   * This update can either be caused by a pointer movement, or an axis update.
   * In case of multiple axes, the function is called if at least one axis is updated.
   * The argument contains the identifier for all axes with a `data` property.
   * @param {AxisItemIdentifier[]} axisItems The array of axes item identifiers.
   */
  onHighlightedAxisChange: import_prop_types.default.func,
  /**
   * Callback fired when clicking close to an item.
   * This is only available for scatter plot for now.
   * @param {MouseEvent} event Mouse event caught at the svg level
   * @param {ScatterItemIdentifier} scatterItemIdentifier Identify which item got clicked
   */
  onItemClick: import_prop_types.default.func,
  /**
   * Type of plot used.
   * @default 'line'
   */
  plotType: import_prop_types.default.oneOf(["bar", "line"]),
  /**
   * Set to `true` to highlight the value.
   * With line, it shows a point.
   * With bar, it shows a highlight band.
   * @default false
   */
  showHighlight: import_prop_types.default.bool,
  /**
   * Set to `true` to enable the tooltip in the sparkline.
   * @default false
   */
  showTooltip: import_prop_types.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types.default.object,
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  theme: import_prop_types.default.oneOf(["dark", "light"]),
  title: import_prop_types.default.string,
  /**
   * Formatter used by the tooltip.
   * @param {number} value The value to format.
   * @returns {string} the formatted value.
   * @default (value: number | null) => (value === null ? '' : value.toString())
   */
  valueFormatter: import_prop_types.default.func,
  /**
   * Defines the maximal distance between a scatter point and the pointer that triggers the interaction.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types.default.number,
  /**
   * The xAxis configuration.
   * Notice it is a single [[AxisConfig]] object, not an array of configuration.
   */
  xAxis: import_prop_types.default.oneOfType([import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    barGapRatio: import_prop_types.default.number,
    categoryGapRatio: import_prop_types.default.number,
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      type: import_prop_types.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types.default.string,
      values: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string]).isRequired)
    }), import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["band"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      type: import_prop_types.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types.default.string,
      values: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string]).isRequired)
    }), import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["point"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["log"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types.default.number,
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["symlog"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["pow"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["sqrt"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["time"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["utc"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["x"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    height: import_prop_types.default.number,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["linear"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelMinGap: import_prop_types.default.number,
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func
  })]),
  /**
   * The yAxis configuration.
   * Notice it is a single [[AxisConfig]] object, not an array of configuration.
   */
  yAxis: import_prop_types.default.oneOfType([import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    barGapRatio: import_prop_types.default.number,
    categoryGapRatio: import_prop_types.default.number,
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      type: import_prop_types.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types.default.string,
      values: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string]).isRequired)
    }), import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["band"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      type: import_prop_types.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types.default.string,
      values: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string]).isRequired)
    }), import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["point"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["log"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types.default.number,
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["symlog"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["pow"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["sqrt"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["time"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["utc"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  }), import_prop_types.default.shape({
    axis: import_prop_types.default.oneOf(["y"]),
    classes: import_prop_types.default.object,
    colorMap: import_prop_types.default.oneOfType([import_prop_types.default.shape({
      color: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string.isRequired), import_prop_types.default.func]).isRequired,
      max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
      type: import_prop_types.default.oneOf(["continuous"]).isRequired
    }), import_prop_types.default.shape({
      colors: import_prop_types.default.arrayOf(import_prop_types.default.string).isRequired,
      thresholds: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]).isRequired).isRequired,
      type: import_prop_types.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types.default.array,
    dataKey: import_prop_types.default.string,
    disableLine: import_prop_types.default.bool,
    disableTicks: import_prop_types.default.bool,
    domainLimit: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["nice", "strict"]), import_prop_types.default.func]),
    fill: import_prop_types.default.string,
    hideTooltip: import_prop_types.default.bool,
    id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
    ignoreTooltip: import_prop_types.default.bool,
    label: import_prop_types.default.string,
    labelStyle: import_prop_types.default.object,
    max: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    min: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number]),
    offset: import_prop_types.default.number,
    position: import_prop_types.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types.default.bool,
    scaleType: import_prop_types.default.oneOf(["linear"]),
    slotProps: import_prop_types.default.object,
    slots: import_prop_types.default.object,
    stroke: import_prop_types.default.string,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    tickInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.array, import_prop_types.default.func]),
    tickLabelInterval: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["auto"]), import_prop_types.default.func]),
    tickLabelPlacement: import_prop_types.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types.default.object,
    tickMaxStep: import_prop_types.default.number,
    tickMinStep: import_prop_types.default.number,
    tickNumber: import_prop_types.default.number,
    tickPlacement: import_prop_types.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types.default.number,
    valueFormatter: import_prop_types.default.func,
    width: import_prop_types.default.number
  })])
} : void 0;

export {
  SparkLineChart
};
//# sourceMappingURL=chunk-2MUQTPMH.js.map
