{
  "version": 3,
  "sources": ["../../@mui/x-tree-view/esm/internals/TreeViewProvider/TreeViewContext.js", "../../@mui/x-tree-view/esm/internals/TreeViewProvider/TreeViewProvider.js", "../../@mui/x-tree-view/esm/internals/corePlugins/useTreeViewId/useTreeViewId.utils.js", "../../@mui/x-tree-view/esm/internals/hooks/useSelector.js", "../../@mui/x-tree-view/esm/internals/utils/selectors.js", "../../@mui/x-tree-view/esm/internals/corePlugins/useTreeViewId/useTreeViewId.selectors.js"],
  "sourcesContent": ["'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - internal component.\n */\nexport const TreeViewContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") TreeViewContext.displayName = \"TreeViewContext\";\nexport const useTreeViewContext = () => {\n  const context = React.useContext(TreeViewContext);\n  if (context == null) {\n    throw new Error(['MUI X: Could not find the Tree View context.', 'It looks like you rendered your component outside of a SimpleTreeView or RichTreeView parent component.', 'This can also happen if you are bundling multiple versions of the Tree View.'].join('\\n'));\n  }\n  return context;\n};", "import * as React from 'react';\nimport { TreeViewContext } from \"./TreeViewContext.js\";\nimport { TreeViewStyleContext } from \"./TreeViewStyleContext.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst EMPTY_OBJECT = {};\n\n/**\n * Sets up the contexts for the underlying Tree Item components.\n *\n * @ignore - do not document.\n */\nexport function TreeViewProvider(props) {\n  const {\n    contextValue,\n    classes = EMPTY_OBJECT,\n    slots = EMPTY_OBJECT,\n    slotProps = EMPTY_OBJECT,\n    children\n  } = props;\n  const styleContextValue = React.useMemo(() => ({\n    classes,\n    slots: {\n      collapseIcon: slots.collapseIcon,\n      expandIcon: slots.expandIcon,\n      endIcon: slots.endIcon\n    },\n    slotProps: {\n      collapseIcon: slotProps.collapseIcon,\n      expandIcon: slotProps.expandIcon,\n      endIcon: slotProps.endIcon\n    }\n  }), [classes, slots.collapseIcon, slots.expandIcon, slots.endIcon, slotProps.collapseIcon, slotProps.expandIcon, slotProps.endIcon]);\n  return /*#__PURE__*/_jsx(TreeViewContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(TreeViewStyleContext.Provider, {\n      value: styleContextValue,\n      children: contextValue.wrapRoot({\n        children\n      })\n    })\n  });\n}", "let globalTreeViewDefaultId = 0;\nexport const createTreeViewDefaultId = () => {\n  globalTreeViewDefaultId += 1;\n  return `mui-tree-view-${globalTreeViewDefaultId}`;\n};\n\n/**\n * Generate the id attribute (i.e.: the `id` attribute passed to the DOM element) of a Tree Item.\n * If the user explicitly defined an id attribute, it will be returned.\n * Otherwise, the method creates a unique id for the item based on the Tree View id attribute and the item `itemId`\n * @param {object} params The parameters to determine the id attribute of the item.\n * @param {TreeViewItemId} params.itemId The id of the item to get the id attribute of.\n * @param {string | undefined} params.idAttribute The id attribute of the item if explicitly defined by the user.\n * @param {string} params.treeId The id attribute of the Tree View.\n * @returns {string} The id attribute of the item.\n */\nexport const generateTreeItemIdAttribute = ({\n  id,\n  treeId = '',\n  itemId\n}) => {\n  if (id != null) {\n    return id;\n  }\n  return `${treeId}-${itemId}`;\n};", "/* We need to import the shim because React 17 does not support the `useSyncExternalStore` API.\n * More info: https://github.com/mui/mui-x/issues/18303#issuecomment-2958392341 */\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nconst defaultCompare = Object.is;\nexport const useSelector = (store, selector, args = undefined, equals = defaultCompare) => {\n  const selectorWithArgs = state => selector(state, args);\n  return useSyncExternalStoreWithSelector(store.subscribe, store.getSnapshot, store.getSnapshot, selectorWithArgs, equals);\n};", "import { lruMemoize, createSelectorCreator } from 'reselect';\nconst reselectCreateSelector = createSelectorCreator({\n  memoize: lruMemoize,\n  memoizeOptions: {\n    maxSize: 1,\n    equalityCheck: Object.is\n  }\n});\nconst cache = new WeakMap();\n\n/**\n * Type of a selector that take the whole tree view state as input and returns a value based on a required plugin.\n * @param {TreeViewState} state The state of the Tree View.\n * @returns {any | undefined} The value of the plugin state.\n */\n\n/**\n * Type of a selector that take the whole tree view state as input and returns a value based on an optional plugin.\n *\n * @param {TreeViewState} state The state of the Tree View.\n * @returns {any | undefined} The value of the plugin state or undefined if the plugin is not registered.\n */\n\n/**\n * Method wrapping reselect's createSelector to provide caching for tree view instances.\n *\n */\nexport const createSelector = (...createSelectorArgs) => {\n  const selector = (state, selectorArgs) => {\n    const cacheKey = state.cacheKey;\n\n    // If there is no cache for the current tree view instance, create one.\n    let cacheForCurrentTreeViewInstance = cache.get(cacheKey);\n    if (!cacheForCurrentTreeViewInstance) {\n      cacheForCurrentTreeViewInstance = new Map();\n      cache.set(cacheKey, cacheForCurrentTreeViewInstance);\n    }\n\n    // If there is a cached selector, execute it.\n    const cachedSelector = cacheForCurrentTreeViewInstance.get(createSelectorArgs);\n    if (cachedSelector) {\n      return cachedSelector(state, selectorArgs);\n    }\n\n    // Otherwise, create a new selector and cache it and execute it.\n    const fn = reselectCreateSelector(...createSelectorArgs);\n    cacheForCurrentTreeViewInstance.set(createSelectorArgs, fn);\n    return fn(state, selectorArgs);\n  };\n  return selector;\n};", "import { createSelector } from \"../../utils/selectors.js\";\nconst selectorTreeViewIdState = state => state.id;\n\n/**\n * Get the id attribute of the tree view.\n * @param {TreeViewState<[UseTreeViewIdSignature]>} state The state of the tree view.\n * @returns {string} The id attribute of the tree view.\n */\nexport const selectorTreeViewId = createSelector(selectorTreeViewIdState, idState => idState.treeId);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAEA,YAAuB;AAIhB,IAAM,kBAAqC,oBAAc,IAAI;AACpE,IAAI,KAAuC,iBAAgB,cAAc;AAClE,IAAM,qBAAqB,MAAM;AACtC,QAAM,UAAgB,iBAAW,eAAe;AAChD,MAAI,WAAW,MAAM;AACnB,UAAM,IAAI,MAAM,CAAC,gDAAgD,2GAA2G,8EAA8E,EAAE,KAAK,IAAI,CAAC;AAAA,EACxQ;AACA,SAAO;AACT;;;ACdA,IAAAA,SAAuB;AAGvB,yBAA4B;AAC5B,IAAM,eAAe,CAAC;AAOf,SAAS,iBAAiB,OAAO;AACtC,QAAM;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ;AAAA,EACF,IAAI;AACJ,QAAM,oBAA0B,eAAQ,OAAO;AAAA,IAC7C;AAAA,IACA,OAAO;AAAA,MACL,cAAc,MAAM;AAAA,MACpB,YAAY,MAAM;AAAA,MAClB,SAAS,MAAM;AAAA,IACjB;AAAA,IACA,WAAW;AAAA,MACT,cAAc,UAAU;AAAA,MACxB,YAAY,UAAU;AAAA,MACtB,SAAS,UAAU;AAAA,IACrB;AAAA,EACF,IAAI,CAAC,SAAS,MAAM,cAAc,MAAM,YAAY,MAAM,SAAS,UAAU,cAAc,UAAU,YAAY,UAAU,OAAO,CAAC;AACnI,aAAoB,mBAAAC,KAAK,gBAAgB,UAAU;AAAA,IACjD,OAAO;AAAA,IACP,cAAuB,mBAAAA,KAAK,qBAAqB,UAAU;AAAA,MACzD,OAAO;AAAA,MACP,UAAU,aAAa,SAAS;AAAA,QAC9B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AACH;;;ACzCA,IAAI,0BAA0B;AACvB,IAAM,0BAA0B,MAAM;AAC3C,6BAA2B;AAC3B,SAAO,iBAAiB,uBAAuB;AACjD;AAYO,IAAM,8BAA8B,CAAC;AAAA,EAC1C;AAAA,EACA,SAAS;AAAA,EACT;AACF,MAAM;AACJ,MAAI,MAAM,MAAM;AACd,WAAO;AAAA,EACT;AACA,SAAO,GAAG,MAAM,IAAI,MAAM;AAC5B;;;ACvBA,2BAAiD;AACjD,IAAM,iBAAiB,OAAO;AACvB,IAAM,cAAc,CAAC,OAAO,UAAU,OAAO,QAAW,SAAS,mBAAmB;AACzF,QAAM,mBAAmB,WAAS,SAAS,OAAO,IAAI;AACtD,aAAO,uDAAiC,MAAM,WAAW,MAAM,aAAa,MAAM,aAAa,kBAAkB,MAAM;AACzH;;;ACNA,IAAM,yBAAyB,sBAAsB;AAAA,EACnD,SAAS;AAAA,EACT,gBAAgB;AAAA,IACd,SAAS;AAAA,IACT,eAAe,OAAO;AAAA,EACxB;AACF,CAAC;AACD,IAAM,QAAQ,oBAAI,QAAQ;AAmBnB,IAAM,iBAAiB,IAAI,uBAAuB;AACvD,QAAM,WAAW,CAAC,OAAO,iBAAiB;AACxC,UAAM,WAAW,MAAM;AAGvB,QAAI,kCAAkC,MAAM,IAAI,QAAQ;AACxD,QAAI,CAAC,iCAAiC;AACpC,wCAAkC,oBAAI,IAAI;AAC1C,YAAM,IAAI,UAAU,+BAA+B;AAAA,IACrD;AAGA,UAAM,iBAAiB,gCAAgC,IAAI,kBAAkB;AAC7E,QAAI,gBAAgB;AAClB,aAAO,eAAe,OAAO,YAAY;AAAA,IAC3C;AAGA,UAAM,KAAK,uBAAuB,GAAG,kBAAkB;AACvD,oCAAgC,IAAI,oBAAoB,EAAE;AAC1D,WAAO,GAAG,OAAO,YAAY;AAAA,EAC/B;AACA,SAAO;AACT;;;ACjDA,IAAM,0BAA0B,WAAS,MAAM;AAOxC,IAAM,qBAAqB,eAAe,yBAAyB,aAAW,QAAQ,MAAM;",
  "names": ["React", "_jsx"]
}
