import {
  useTreeItem
} from "./chunk-F3ZZRCQ4.js";
import {
  TreeItemProvider
} from "./chunk-ES7GYOYO.js";
import {
  TreeItemIcon
} from "./chunk-EYIBXSK3.js";
import {
  useTreeViewStyleContext
} from "./chunk-WMZYJLQT.js";
import {
  Collapse_default
} from "./chunk-4SBFU3VP.js";
import {
  useSlotProps_default
} from "./chunk-WI27ZLKQ.js";
import {
  useThemeProps
} from "./chunk-CXXU2S25.js";
import {
  CircularProgress_default
} from "./chunk-RISXN35B.js";
import {
  Checkbox_default
} from "./chunk-CEQPDLIR.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-BFL632LT.js";
import {
  unsupportedProp
} from "./chunk-WFAVJ75R.js";
import {
  alpha,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  shouldForwardProp,
  styled_default2 as styled_default
} from "./chunk-GOIHIF2J.js";
import {
  clsx_default
} from "./chunk-U7P2NEEE.js";
import {
  _extends
} from "./chunk-EQCCHGRT.js";
import {
  require_prop_types
} from "./chunk-KGQARGC2.js";
import {
  require_jsx_runtime
} from "./chunk-OBYCLIUT.js";
import {
  require_react
} from "./chunk-BQYK6RGN.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@mui/x-tree-view/esm/TreeItem/TreeItem.js
var React2 = __toESM(require_react(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-tree-view/esm/internals/zero-styled/index.js
function createUseThemeProps(name) {
  return useThemeProps;
}

// node_modules/@mui/x-tree-view/esm/TreeItem/treeItemClasses.js
function getTreeItemUtilityClass(slot) {
  return generateUtilityClass("MuiTreeItem", slot);
}
var treeItemClasses = generateUtilityClasses("MuiTreeItem", [
  "root",
  "content",
  "groupTransition",
  "iconContainer",
  "label",
  "checkbox",
  "labelInput",
  "dragAndDropOverlay",
  "errorIcon",
  "loadingIcon",
  // State classes, will be replaced by data-attrs in the next major
  "expanded",
  "selected",
  "focused",
  "disabled",
  "editable",
  "editing"
]);

// node_modules/@mui/x-tree-view/esm/TreeItemDragAndDropOverlay/TreeItemDragAndDropOverlay.js
var React = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var TreeItemDragAndDropOverlayRoot = styled_default("div", {
  name: "MuiTreeItemDragAndDropOverlay",
  slot: "Root",
  shouldForwardProp: (prop) => shouldForwardProp(prop) && prop !== "action"
})(({
  theme
}) => ({
  position: "absolute",
  left: 0,
  display: "flex",
  top: 0,
  bottom: 0,
  right: 0,
  pointerEvents: "none",
  variants: [{
    props: {
      action: "make-child"
    },
    style: {
      marginLeft: "calc(var(--TreeView-indentMultiplier) * var(--TreeView-itemDepth))",
      borderRadius: theme.shape.borderRadius,
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.darkChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.dark, theme.palette.action.focusOpacity)
    }
  }, {
    props: {
      action: "reorder-above"
    },
    style: {
      marginLeft: "calc(var(--TreeView-indentMultiplier) * var(--TreeView-itemDepth))",
      borderTop: `1px solid ${(theme.vars || theme).palette.action.active}`
    }
  }, {
    props: {
      action: "reorder-below"
    },
    style: {
      marginLeft: "calc(var(--TreeView-indentMultiplier) * var(--TreeView-itemDepth))",
      borderBottom: `1px solid ${(theme.vars || theme).palette.action.active}`
    }
  }, {
    props: {
      action: "move-to-parent"
    },
    style: {
      marginLeft: "calc(var(--TreeView-indentMultiplier) * calc(var(--TreeView-itemDepth) - 1))",
      borderBottom: `1px solid ${(theme.vars || theme).palette.action.active}`
    }
  }]
}));
function TreeItemDragAndDropOverlay(props) {
  if (props.action == null) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(TreeItemDragAndDropOverlayRoot, _extends({}, props));
}
true ? TreeItemDragAndDropOverlay.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  action: import_prop_types.default.oneOf(["make-child", "move-to-parent", "reorder-above", "reorder-below"]),
  style: import_prop_types.default.object
} : void 0;

// node_modules/@mui/x-tree-view/esm/TreeItemLabelInput/TreeItemLabelInput.js
var TreeItemLabelInput = styled_default("input", {
  name: "MuiTreeItem",
  slot: "LabelInput"
})(({
  theme
}) => _extends({}, theme.typography.body1, {
  width: "100%",
  backgroundColor: (theme.vars || theme).palette.background.paper,
  borderRadius: theme.shape.borderRadius,
  border: "none",
  padding: "0 2px",
  boxSizing: "border-box",
  "&:focus": {
    outline: `1px solid ${(theme.vars || theme).palette.primary.main}`
  }
}));

// node_modules/@mui/x-tree-view/esm/TreeItem/TreeItem.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var _excluded = ["visible"];
var _excluded2 = ["id", "itemId", "label", "disabled", "children", "slots", "slotProps", "classes"];
var useThemeProps2 = createUseThemeProps("MuiTreeItem");
var TreeItemRoot = styled_default("li", {
  name: "MuiTreeItem",
  slot: "Root"
})({
  listStyle: "none",
  margin: 0,
  padding: 0,
  outline: 0
});
var TreeItemContent = styled_default("div", {
  name: "MuiTreeItem",
  slot: "Content",
  shouldForwardProp: (prop) => shouldForwardProp(prop) && prop !== "status"
})(({
  theme
}) => ({
  padding: theme.spacing(0.5, 1),
  paddingLeft: `calc(${theme.spacing(1)} + var(--TreeView-itemChildrenIndentation) * var(--TreeView-itemDepth))`,
  borderRadius: theme.shape.borderRadius,
  width: "100%",
  boxSizing: "border-box",
  // prevent width + padding to overflow
  position: "relative",
  display: "flex",
  alignItems: "center",
  gap: theme.spacing(1),
  cursor: "pointer",
  WebkitTapHighlightColor: "transparent",
  "&:hover": {
    backgroundColor: (theme.vars || theme).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  "&[data-disabled]": {
    opacity: (theme.vars || theme).palette.action.disabledOpacity,
    backgroundColor: "transparent"
  },
  "&[data-focused]": {
    backgroundColor: (theme.vars || theme).palette.action.focus
  },
  "&[data-selected]": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    }
  },
  "&[data-selected][data-focused]": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
  }
}));
var TreeItemLabel = styled_default("div", {
  name: "MuiTreeItem",
  slot: "Label",
  shouldForwardProp: (prop) => shouldForwardProp(prop) && prop !== "editable"
})(({
  theme
}) => _extends({
  width: "100%",
  boxSizing: "border-box",
  // prevent width + padding to overflow
  // fixes overflow - see https://github.com/mui/material-ui/issues/27372
  minWidth: 0,
  position: "relative",
  overflow: "hidden"
}, theme.typography.body1, {
  variants: [{
    props: ({
      editable
    }) => editable,
    style: {
      paddingLeft: "2px"
    }
  }]
}));
var TreeItemIconContainer = styled_default("div", {
  name: "MuiTreeItem",
  slot: "IconContainer"
})({
  width: 16,
  display: "flex",
  flexShrink: 0,
  justifyContent: "center",
  position: "relative",
  "& svg": {
    fontSize: 18
  }
});
var TreeItemGroupTransition = styled_default(Collapse_default, {
  name: "MuiTreeItem",
  slot: "GroupTransition",
  overridesResolver: (props, styles) => styles.groupTransition
})({
  margin: 0,
  padding: 0
});
var TreeItemErrorContainer = styled_default("div", {
  name: "MuiTreeItem",
  slot: "ErrorIcon"
})({
  position: "absolute",
  right: -3,
  width: 7,
  height: 7,
  borderRadius: "50%",
  backgroundColor: "red"
});
var TreeItemLoadingContainer = styled_default(CircularProgress_default, {
  name: "MuiTreeItem",
  slot: "LoadingIcon"
})({
  color: "text.primary"
});
var TreeItemCheckbox = styled_default(React2.forwardRef((props, ref) => {
  const {
    visible
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  if (!visible) {
    return null;
  }
  return (0, import_jsx_runtime2.jsx)(Checkbox_default, _extends({}, other, {
    ref
  }));
}), {
  name: "MuiTreeItem",
  slot: "Checkbox"
})({
  padding: 0
});
if (true) TreeItemCheckbox.displayName = "TreeItemCheckbox";
var useUtilityClasses = (classesProp) => {
  const {
    classes: classesFromTreeView
  } = useTreeViewStyleContext();
  const classes = _extends({}, classesProp, {
    root: clsx_default(classesProp?.root, classesFromTreeView.root),
    content: clsx_default(classesProp?.content, classesFromTreeView.itemContent),
    iconContainer: clsx_default(classesProp?.iconContainer, classesFromTreeView.itemIconContainer),
    checkbox: clsx_default(classesProp?.checkbox, classesFromTreeView.itemCheckbox),
    label: clsx_default(classesProp?.label, classesFromTreeView.itemLabel),
    groupTransition: clsx_default(classesProp?.groupTransition, classesFromTreeView.itemGroupTransition),
    labelInput: clsx_default(classesProp?.labelInput, classesFromTreeView.itemLabelInput),
    dragAndDropOverlay: clsx_default(classesProp?.dragAndDropOverlay, classesFromTreeView.itemDragAndDropOverlay),
    errorIcon: clsx_default(classesProp?.errorIcon, classesFromTreeView.itemErrorIcon),
    loadingIcon: clsx_default(classesProp?.loadingIcon, classesFromTreeView.itemLoadingIcon)
  });
  const slots = {
    root: ["root"],
    content: ["content"],
    iconContainer: ["iconContainer"],
    checkbox: ["checkbox"],
    label: ["label"],
    groupTransition: ["groupTransition"],
    labelInput: ["labelInput"],
    dragAndDropOverlay: ["dragAndDropOverlay"],
    errorIcon: ["errorIcon"],
    loadingIcon: ["loadingIcon"],
    expanded: ["expanded"],
    editing: ["editing"],
    editable: ["editable"],
    selected: ["selected"],
    focused: ["focused"],
    disabled: ["disabled"]
  };
  return composeClasses(slots, getTreeItemUtilityClass, classes);
};
var TreeItem = React2.forwardRef(function TreeItem2(inProps, forwardedRef) {
  const props = useThemeProps2({
    props: inProps,
    name: "MuiTreeItem"
  });
  const {
    id,
    itemId,
    label,
    disabled,
    children,
    slots = {},
    slotProps = {},
    classes: classesProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const {
    getContextProviderProps,
    getRootProps,
    getContentProps,
    getIconContainerProps,
    getCheckboxProps,
    getLabelProps,
    getGroupTransitionProps,
    getLabelInputProps,
    getDragAndDropOverlayProps,
    getErrorContainerProps,
    getLoadingContainerProps,
    status
  } = useTreeItem({
    id,
    itemId,
    children,
    label,
    disabled
  });
  const classes = useUtilityClasses(classesProp);
  const Root = slots.root ?? TreeItemRoot;
  const rootProps = useSlotProps_default({
    elementType: Root,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    externalSlotProps: slotProps.root,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState: {},
    className: classes.root
  });
  const Content = slots.content ?? TreeItemContent;
  const contentProps = useSlotProps_default({
    elementType: Content,
    getSlotProps: getContentProps,
    externalSlotProps: slotProps.content,
    ownerState: {},
    className: clsx_default(classes.content, status.expanded && classes.expanded, status.selected && classes.selected, status.focused && classes.focused, status.disabled && classes.disabled, status.editing && classes.editing, status.editable && classes.editable)
  });
  const IconContainer = slots.iconContainer ?? TreeItemIconContainer;
  const iconContainerProps = useSlotProps_default({
    elementType: IconContainer,
    getSlotProps: getIconContainerProps,
    externalSlotProps: slotProps.iconContainer,
    ownerState: {},
    className: classes.iconContainer
  });
  const Label = slots.label ?? TreeItemLabel;
  const labelProps = useSlotProps_default({
    elementType: Label,
    getSlotProps: getLabelProps,
    externalSlotProps: slotProps.label,
    ownerState: {},
    className: classes.label
  });
  const Checkbox = slots.checkbox ?? TreeItemCheckbox;
  const checkboxProps = useSlotProps_default({
    elementType: Checkbox,
    getSlotProps: getCheckboxProps,
    externalSlotProps: slotProps.checkbox,
    ownerState: {},
    className: classes.checkbox
  });
  const GroupTransition = slots.groupTransition ?? void 0;
  const groupTransitionProps = useSlotProps_default({
    elementType: GroupTransition,
    getSlotProps: getGroupTransitionProps,
    externalSlotProps: slotProps.groupTransition,
    ownerState: {},
    className: classes.groupTransition
  });
  const LabelInput = slots.labelInput ?? TreeItemLabelInput;
  const labelInputProps = useSlotProps_default({
    elementType: LabelInput,
    getSlotProps: getLabelInputProps,
    externalSlotProps: slotProps.labelInput,
    ownerState: {},
    className: classes.labelInput
  });
  const DragAndDropOverlay = slots.dragAndDropOverlay ?? TreeItemDragAndDropOverlay;
  const dragAndDropOverlayProps = useSlotProps_default({
    elementType: DragAndDropOverlay,
    getSlotProps: getDragAndDropOverlayProps,
    externalSlotProps: slotProps.dragAndDropOverlay,
    ownerState: {},
    className: classes.dragAndDropOverlay
  });
  const ErrorIcon = slots.errorIcon ?? TreeItemErrorContainer;
  const errorContainerProps = useSlotProps_default({
    elementType: ErrorIcon,
    getSlotProps: getErrorContainerProps,
    externalSlotProps: slotProps.errorIcon,
    ownerState: {},
    className: classes.errorIcon
  });
  const LoadingIcon = slots.loadingIcon ?? TreeItemLoadingContainer;
  const loadingContainerProps = useSlotProps_default({
    elementType: LoadingIcon,
    getSlotProps: getLoadingContainerProps,
    externalSlotProps: slotProps.loadingIcon,
    ownerState: {},
    className: classes.loadingIcon
  });
  return (0, import_jsx_runtime2.jsx)(TreeItemProvider, _extends({}, getContextProviderProps(), {
    children: (0, import_jsx_runtime2.jsxs)(Root, _extends({}, rootProps, {
      children: [(0, import_jsx_runtime2.jsxs)(Content, _extends({}, contentProps, {
        children: [(0, import_jsx_runtime2.jsxs)(IconContainer, _extends({}, iconContainerProps, {
          children: [status.error && (0, import_jsx_runtime2.jsx)(ErrorIcon, _extends({}, errorContainerProps)), status.loading ? (0, import_jsx_runtime2.jsx)(LoadingIcon, _extends({}, loadingContainerProps)) : (0, import_jsx_runtime2.jsx)(TreeItemIcon, {
            status,
            slots,
            slotProps
          })]
        })), (0, import_jsx_runtime2.jsx)(Checkbox, _extends({}, checkboxProps)), status.editing ? (0, import_jsx_runtime2.jsx)(LabelInput, _extends({}, labelInputProps)) : (0, import_jsx_runtime2.jsx)(Label, _extends({}, labelProps)), (0, import_jsx_runtime2.jsx)(DragAndDropOverlay, _extends({}, dragAndDropOverlayProps))]
      })), children && (0, import_jsx_runtime2.jsx)(TreeItemGroupTransition, _extends({
        as: GroupTransition
      }, groupTransitionProps))]
    }))
  }));
});
if (true) TreeItem.displayName = "TreeItem";
true ? TreeItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types2.default.any,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types2.default.object,
  className: import_prop_types2.default.string,
  /**
   * If `true`, the item is disabled.
   * @default false
   */
  disabled: import_prop_types2.default.bool,
  /**
   * The id attribute of the item. If not provided, it will be generated.
   */
  id: import_prop_types2.default.string,
  /**
   * The id of the item.
   * Must be unique.
   */
  itemId: import_prop_types2.default.string.isRequired,
  /**
   * The label of the item.
   */
  label: import_prop_types2.default.node,
  /**
   * Callback fired when the item root is blurred.
   */
  onBlur: import_prop_types2.default.func,
  /**
   * This prop isn't supported.
   * Use the `onItemFocus` callback on the tree if you need to monitor an item's focus.
   */
  onFocus: unsupportedProp,
  /**
   * Callback fired when a key is pressed on the keyboard and the tree is in focus.
   */
  onKeyDown: import_prop_types2.default.func,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types2.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types2.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object])
} : void 0;

export {
  createUseThemeProps,
  getTreeItemUtilityClass,
  treeItemClasses,
  TreeItemRoot,
  TreeItemContent,
  TreeItemLabel,
  TreeItemIconContainer,
  TreeItemGroupTransition,
  TreeItemCheckbox,
  TreeItem
};
//# sourceMappingURL=chunk-4FWSVV3K.js.map
